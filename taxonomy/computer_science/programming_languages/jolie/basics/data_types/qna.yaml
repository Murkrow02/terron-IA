version: 2
task_description: |
    Teach the model about data types in Jolie, including basic, refined, and custom data types.
created_by: davidederosa
seed_examples:
  - context: |
      In Jolie, messages exchanged through operations are data trees. A data type defines the structure of these data trees, the type of content in each node, and the allowed number of occurrences of each node.
    question: What are the basic data types available in Jolie?
    answer: |
      The basic data types in Jolie are void, bool, int, long, double, string, raw, and any.
  - question: How can you define a custom data type as an alias for a basic data type in Jolie?
    answer: |
      You can define a custom data type as an alias using the syntax: `type CustomType: T`, where T is a basic data type.
  - question: What happens if a value does not conform to a refinement type in Jolie?
    answer: |
      If a value does not conform to a refinement type, a TypeMismatch error is raised by the interpreter.
  - context: |
      type MyType {
          email: string( regex(".*@.*\\..*") )
      }
    question: How do you enforce a string to match an email format in Jolie?
    answer: |
      You can use the regex refinement, such as `string( regex(".*@.*\\..*") )`, to ensure the string respects the email format.
  - context: |
      type MyType {
          name: string( enum(["paul","homer","mark"]))
      }
    question: How can you restrict a string field to a specific set of values in Jolie?
    answer: |
      You can use the enum refinement to specify a set of allowed values, e.g., `string( enum(["paul","homer","mark"]) )`.
  - context: |
      type ShoppingList {
          fruits: int {
              bananas: int
              apples: int
          }
          notes: string
      }
    question: How do you define nested custom data types in Jolie?
    answer: |
      Nested custom data types can be defined using the syntax where subnodes are declared with their types, such as:
      `type ShoppingList { fruits: int { bananas: int apples: int } notes: string }`.
  - context: |
      type myType: string {
          x[1,*]: mySubType
          y[1,3]: void {
              value*: double
              comment: string
          }
          z?: void { ? }
      }
    question: What does the cardinality `[1,*]` signify in Jolie?
    answer: |
      The cardinality `[1,*]` means that the node must appear at least once and can appear an unlimited number of times.
  - question: How do you check a variable's type at runtime in Jolie?
    answer: |
      You can use the `instanceof` primitive to check a variable's type at runtime.
  - question: What does the `undefined` type represent in Jolie?
    answer: |
      The `undefined` type is a shortcut for `any { ? }`, meaning the type of a tree with any root type and an undefined set of subnodes.
  - context: |
      type Coordinates: void {
          lat: double
          lng: double
      }
    question: How do you represent a nested data type for geographic coordinates in Jolie?
    answer: |
      You can define a nested data type such as `type Coordinates { lat: double lng: double }`.
  - question: How can you define a node with special characters in its name in Jolie?
    answer: |
      You can use double quotes to enclose the node name, e.g., `type TestType { "@node": string }`.
