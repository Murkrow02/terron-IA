version: 2
task_description: |
    This documentation explains basic data types, casting, runtime type checking, working with strings, undefined variables, and dynamic arrays in Jolie.
created_by: davidederosa
seed_examples:
  - question: What are the basic data types supported in Jolie?
    answer: |
      Jolie supports the following basic data types: bool, int, long, double, string, raw, void, and any.
  - question: How does type checking work in Jolie?
    answer: |
      In Jolie, variables are dynamically typed, meaning their types are checked at runtime when messages are sent or received between services.
  - context: |
      Jolie allows for the conversion between different types using casting functions like `bool()`, `int()`, `long()`, `double()`, and `string()`. For example, you can convert a string to an integer or a double as shown below:
      ```jolie
      s = "10";
      n = 5 + int( s ); // n = 15
      ```
    question: |
      How can you convert a string to an integer in Jolie?
    answer: |
      You can convert a string to an integer using the `int()` function. For example, `n = 5 + int("10");` will result in `n = 15`.
  - context: |
      Variables in Jolie can be checked for their types at runtime using the `instanceof` operator. The syntax is `expression instanceof (native_type | custom_type)`. Example:
      ```jolie
      s = "10";
      n = s instanceof string; // n = true
      ```
    question: |
      How can you check the type of a variable in Jolie at runtime?
    answer: |
      You can use the `instanceof` operator to check the type of a variable at runtime. For example, `n = s instanceof string;` will check if `s` is of type string.
  - question: What is the purpose of the `is_defined` function in Jolie?
    answer: |
      The `is_defined` function checks whether a variable has been assigned a value or is undefined. For example, `is_defined(a)` returns `true` if `a` has a value, and `false` if `a` is undefined.
  - context: |
      Dynamic arrays in Jolie are accessed using the `[]` operator. They are automatically indexed and the array size can be determined using the `#` operator. Example:
      ```jolie
      a[ 0 ] = 0;
      a[ 1 ] = 1;
      a[ 2 ] = 2;
      a[ 3 ] = 3;
      println@Console( #a )() // Will print 4
      ```
    question: |
      How do you find the size of a dynamic array in Jolie?
    answer: |
      The size of a dynamic array can be found using the `#` operator. For example, `#a` will return the size of the array `a`.
  - question: How does Jolie handle undefined variables?
    answer: |
      In Jolie, variables are initially undefined. To check if a variable is defined, use the `is_defined` function. You can also undefine a variable using the `undef` statement, which makes the variable undefined again.
  - context: |
      a[0] = 0
      a[1] = 5
      a[2] = "Hello"
      a[3] = 2.5
    question: |
      How do you define an array in Jolie?
    answer: |
      In Jolie, arrays are dynamic and can be defined using the `[]` operator. For example, `a[0] = 0` defines an array with a value of `0` at index `0`.
  - context: |
      matrix = [[1, 2], [3, 4]]
      matrix._[0]._[1]
    question: |
      How can you work with nested arrays in Jolie?
    answer: |
      Jolie does not directly support nested arrays, but you can work with them by using the `_`-named children nodes. For example, `matrix._[0]._[1]` accesses the element at index `[0][1]` in the nested array.
