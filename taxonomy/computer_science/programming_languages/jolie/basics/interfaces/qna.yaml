version: 2
task_description: |
    Teach the model about Jolie interface definitions, their structure, types of operations, and fault handling declarations.
created_by: davidederosa
seed_examples:
  - context: |
      Jolie defines two types of operations:
      - one-way operations, which receive a message.
      - request-response operations, which reply or receive a message and send back a response.
      An interface in Jolie is a collection of operation types, a list of One-Way and Request-Response operation declarations. The basic declaration of an interface includes the names of its operations, grouped by type.
      Here is the syntax for an interface declaration:
      interface identifier {
          OneWay:
              ow_name1( t1 ),
              ow_name2( t2 ),
              //...,
              ow_nameN( tN )
          RequestResponse:
              rr_name1( tk1 )( tk2 ),
              rr_name2( tk3 )( tk4 ),
              //...
              rr_nameN( tkN )( tkN+1 )
      }
      One-way operations require only one message type, while request-responses define both request (left argument) and response (right argument) types.
    question: What are the two types of operations in Jolie interfaces?
    answer: |
      The two types of operations in Jolie interfaces are one-way operations, which receive a message, and request-response operations, which receive a message and send back a response.
  - question: How are operations grouped in a Jolie interface?
    answer: |
      Operations in a Jolie interface are grouped by type into One-Way and Request-Response operation declarations.
  - context: |
      interface ExampleInterface {
          OneWay:
              log( string ),
              notify( int )
          RequestResponse:
              compute( int )( float )
      }
    question: What does the "RequestResponse" section define in this Jolie interface?
    answer: |
        The "RequestResponse" section defines operations where a request message is received and a response message is sent back, such as "compute" with request type "int" and response type "float".
  - context: |
      interface IfaceName {
          RequestResponse:
              calculate( ReqType )( ResType ) throws CalculationError( ErrorMessage )
      }
    question: How can faults be declared for request-response operations in Jolie interfaces?
    answer: |
        Faults for request-response operations in Jolie interfaces are declared using the "throws" statement, listing the fault name and its message type.
  - question: Can you provide an example of a Jolie interface with a single one-way operation?
    answer: |
      Sure, here is an example:
      ```jolie
      interface LoggingInterface {
          OneWay:
              logMessage( string )
      }
      ```
  - question: What is the purpose of the `throws` statement in Jolie interfaces?
    answer: |
      The `throws` statement in Jolie interfaces specifies that a request-response operation can raise faults, listing their names and associated message types.
  - context: |
      interface PaymentInterface {
          RequestResponse:
              processPayment( PaymentRequest )( PaymentResponse ) throws InsufficientFunds( ErrorMsg ), InvalidAccount( ErrorMsg )
      }
    question: What faults can a request-response operation raise in a Jolie interface?
    answer: |
        A request-response operation can raise faults specified using the "throws" statement, listing the fault names and their associated message types.
  - question: What information does the left argument in a request-response operation type provide?
    answer: |
      The left argument in a request-response operation type specifies the type of the request message.
  - question: How would you declare a Jolie interface with both one-way and request-response operations?
    answer: |
      Here is an example:
      ```jolie
      interface MixedOperationsInterface {
          OneWay:
              notifyUser( string )
          RequestResponse:
              getUserData( UserRequest )( UserResponse )
      }
      ```
        - context: |
      One-way operations in Jolie are used to send a message but do not expect a response. These are useful for scenarios where a service is simply receiving a command or data but does not need to reply back. The syntax is as follows:
      interface MyInterface {
          OneWay:
              operation1( MessageType1 ),
              operation2( MessageType2 )
      }
      In this case, operation1 and operation2 are one-way operations that each take a specific message type as input.
  - question: What is the purpose of one-way operations in Jolie?
    answer: One-way operations in Jolie are used to send a message without expecting a response, typically for commands or data reception.

  - context: |
      In Jolie, interfaces provide a way to define the operations a service exposes, and the operations are grouped into one-way and request-response categories. The interface syntax allows for clear separation of different types of operations, making the code more organized and easier to understand.
    question: Why is it important to categorize operations in Jolie interfaces?
    answer: Categorizing operations in Jolie interfaces helps organize the code and distinguishes between operations that require responses and those that do not, making the service more structured and understandable.
