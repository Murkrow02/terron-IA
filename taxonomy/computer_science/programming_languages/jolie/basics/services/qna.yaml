version: 2
task_description: |
    Teach the AI about the concept of services in Jolie programming language, including definitions, parameterized services, embedding, private services, and service execution targets.
created_by: davidederosa
seed_examples:
  - question: What is the main element of a Jolie program?
    answer: |
      The main element of a Jolie program is a service. It is the minimal artifact that can be designed and developed in Jolie, and every Jolie application is a composition of services.
  - question: How is a service defined in Jolie?
    answer: |
      A service in Jolie is defined using a `service` definition block which includes its deployment and behavior, such as named procedures, communication ports, and execution parameters.
  - context: |
      The following is a Jolie service definition:
      ```jolie
      service MyService() {
          execution: concurrent
          inputPort IP {
              location: "socket://localhost:8000"
              protocol: sodep
              interfaces: MyServiceInterface
          }
          main {
              multiply ( number )( result ) {
                  result = number * 8
              }
          }
      }
      ```
    question: What is the purpose of the `main` block in a Jolie service definition?
    answer: |
        The `main` block in a Jolie service definition specifies the core logic or behavior of the service, outlining how it processes inputs and produces outputs.
  - question: How can parameters be passed to a Jolie service from the command line?
    answer: |
      Parameters can be passed to a Jolie service from the command line using a JSON file and the `--params` argument. For example, `jolie --params params.json my-service.ol` passes the parameters defined in `params.json`.
  - question: What is the purpose of the `embed` keyword in Jolie?
    answer: |
      The `embed` keyword is used to include one service within another, allowing for the creation of multi-service compositions or "cells" in Jolie.
  - context: |
      Services in Jolie can be marked as `private` to restrict their accessibility. For example:
      ```jolie
      private service ConfigurationService {
          inputPort IP {
              location: "local"
              requestResponse: getDBConn( void )(string)
          }
          main {
              getDBConn ( req )( result ) {
                  result = "SUPER_SECRET_CONN"
              }
          }
      }
      ```
    question: What does marking a service as `private` in Jolie achieve?
    answer: |
        Marking a service as `private` in Jolie restricts it from being accessed externally, ensuring secure and maintainable code.
  - question: What happens if a Jolie module contains multiple service definitions and the `--service` parameter is not used?
    answer: |
      If a Jolie module contains multiple service definitions and the `--service` parameter is not used, the Jolie interpreter reports an execution error unless the parameter specifies the target service for execution.
  - question: How is the `execution` modality specified in a Jolie service?
    answer: |
      The `execution` modality in a Jolie service is specified using the `execution` statement within the service definition. For example, `execution: concurrent` sets the service to execute concurrently.
  - context: |
      A parameterized Jolie service can accept input parameters for its execution, such as in the following example:
      ```jolie
      service MyService( p: MyServiceParam ) {
          inputPort IP {
              location: p.location
              protocol: sodep
              interfaces: MyServiceInterface
          }
          main {
              multiply ( number )( result ) {
                  result = number * p.factor
              }
          }
      }
      ```
    question: What is the role of input parameters in a parameterized Jolie service?
    answer: |
        Input parameters in a parameterized Jolie service provide values that configure the service's behavior, such as specifying properties for its `inputPort` or influencing the logic within the `main` block.
