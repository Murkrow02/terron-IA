version: 2
task_description: |
    This skill helps to understand and manage services in Jolie, including their structure, usage, parameters, and execution.
created_by: murkrow
seed_examples:
  - context: |
      The `service` keyword in Jolie is used to define a service and its components. For example, `service MyService()` defines a service that can contain blocks for input ports, execution, and more.
    question: |
      How is a service defined in Jolie?
    answer: |
      A service in Jolie is defined using the `service` keyword followed by the service name and optional parameters. It may also include blocks for input ports and a main section for execution logic.
  - context: |
      The following example shows a simple Jolie service that multiplies a number by a constant factor of 8:
      ```jolie
      interface MyServiceInterface {
          RequestResponse: multiply ( int )( int )
      }

      service MyService() {
          execution: concurrent
          inputPort IP {
              location: "socket://localhost:8000"
              protocol: sodep
              interfaces: MyServiceInterface
          }

          main {
              multiply ( number )( result ) {
                  result = number * 8
              }
          }
      }
      ```
    question: |
      How does the example `MyService` service work in Jolie?
    answer: |
      The `MyService` service listens on a socket at `localhost:8000` using the `sodep` protocol and provides a `multiply` operation. The `multiply` function takes a number and returns the result multiplied by 8.
  - context: |
      Jolie allows parameters to be passed to a service using a JSON file. For instance, the following JSON can be used to pass parameters to a service:
      ```json
      {
          "location": "socket://localhost:8000",
          "factor": 2
      }
      ```
    question: |
      How are parameters passed to a service in Jolie?
    answer: |
      Parameters can be passed to a Jolie service via a JSON file, which is provided as an argument when starting the service using the `--params` option.
  - context: |
      A service can be embedded within another service using the `embed` keyword. For instance, in the following example, `ConfigurationService` is embedded within `MainService`:
      ```jolie
      service ConfigurationService {
          inputPort IP {
              location: "local"
              requestResponse: getDBConn( void )(string)
          }

          main {
              getDBConn ( req )( result ) {
                  result = "SUPER_SECRET_CONN"
              }
          }
      }

      service MainService {
          embed ConfigurationService() as Conf

          main {
              getDBConn@Conf()( res )
          }
      }
      ```
    question: |
      What does the `embed` keyword do in Jolie?
    answer: |
      The `embed` keyword allows one service to be included within another, enabling the inner service's functionality to be used by the outer service.
  - context: |
      Jolie supports both public and private services, where a private service is not accessible by external modules. Private services are defined using the `private` keyword:
      ```jolie
      private service ConfigurationService {
          inputPort IP {
              location: "local"
              requestResponse: getDBConn( void )(string)
          }

          main {
              getDBConn ( req )( result ) {
                  result = "SUPER_SECRET_CONN"
              }
          }
      }
      ```
    question: |
      What is the difference between public and private services in Jolie?
    answer: |
      A public service can be accessed by any module, while a private service is restricted to being used only within the module it is defined in. Private services are defined using the `private` keyword.
  - context: |
      A service in Jolie may also have a specified execution target, which determines which service within a module is executed when the module is run. For instance:
      ```bash
      jolie --service MainService script.ol
      ```
    question: |
      How is a specific service selected for execution in Jolie?
    answer: |
      A specific service can be selected for execution by using the `--service` parameter followed by the name of the service when running the Jolie module.
  - context: |
      In Jolie, parameters can be embedded within the service's execution logic, allowing for dynamic behavior. For example:
      ```jolie
      service MyService ( p: MyServiceParam ) {
          inputPort IP {
              location: p.location
              protocol: sodep
              interfaces: MyServiceInterface
          }

          main {
              multiply ( number )( result ) {
                  result = number * p.factor
              }
          }
      }
      ```
    question: |
      How do parameters affect the behavior of a service in Jolie?
    answer: |
      Parameters in Jolie allow the behavior of a service to be customized at runtime. These parameters can define the service's execution environment, such as the location and protocol of the input port or other logic-specific values.
  - context: |
      A Jolie service can be run with parameters passed through a JSON file, like this:
      ```json
      {
          "location": "socket://localhost:8000",
          "factor": 2
      }
      ```
    question: |
      What is the format of the JSON file used to pass parameters to a Jolie service?
    answer: |
      The JSON file format consists of key-value pairs where keys represent parameter names and values represent their corresponding values. For example, `"location": "socket://localhost:8000"` and `"factor": 2`.
  - context: |
      A service can include an input port that specifies the location, protocol, and interfaces, as shown in the following example:
      ```jolie
      inputPort IP {
          location: "socket://localhost:8000"
          protocol: sodep
          interfaces: MyServiceInterface
      }
      ```
    question: |
      What is the purpose of the input port in a Jolie service?
    answer: |
      The input port in a Jolie service defines how the service communicates with external entities. It specifies the location, protocol, and the interfaces it supports for communication.
  - context: |
      The service `MainService` uses `MyService` by embedding it and passing parameters. For example:
      ```jolie
      service MainService {
          embed MyService({ .protocol = "sodep", .factor = 2 }) as Service
          main {
              multiply@Service( 3 )( res ) // res = 6
              println@Console( res )()
          }
      }
      ```
    question: |
      How does `MainService` interact with `MyService` in Jolie?
    answer: |
      `MainService` embeds `MyService` and passes parameters such as protocol and factor. It then calls the `multiply` function from `MyService` to perform the calculation and prints the result.
